name: Build and Release ASAR File

on:
  push:
    branches:
      - 'main'
      - 'bt/app'
      - 'pre-release/*'
      - 'testing'
      - 'testing/*'
      - 'release/*'
      - 'feature/asar-build'

jobs:
  build_asar:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          yarn install
          yarn global add @quasar/cli

      - name: Build Quasar Electron app
        run: |
          yarn quasar build -m electron

      - name: Copy ASAR File
        run: |
          mkdir -p dist/asar_files
          cp dist/electron/Packaged/Quasar\ App-darwin-arm64/Quasar\ App.app/Contents/Resources/app.asar dist/asar_files/app.asar

      - name: Check ASAR File Size and SHA256
        run: |
          du -sh dist/asar_files/app.asar
          shasum -a 256 dist/asar_files/app.asar

      - name: Upload ASAR File Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-asar
          path: dist/asar_files/app.asar

  release:
    needs: build_asar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download ASAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-asar
          path: ./artifacts/asar

      - name: Compress ASAR File
        run: |
          cd ./artifacts/asar
          zip app-asar.zip app.asar
          du -sh app-asar.zip

      - name: Fetch All Tags
        run: |
          git fetch --tags

      - name: Calculate Next Tag Version
        id: tag_version
        run: |
          git fetch --tags

          # Get the latest tag
          latest_tag=$(git tag --list 'v*' | sort -V | tail -n1)
          echo "Latest tag: $latest_tag"

          if [ -z "$latest_tag" ]; then
            new_tag="v0.1.0"
          else
            IFS='.' read -r major minor patch <<<"${latest_tag#v}"
            while true; do
              new_tag="v$major.$minor.$((patch + 1))"
              # Check if the tag already exists
              if git rev-parse "$new_tag" >/dev/null 2>&1; then
                patch=$((patch + 1))
              else
                break
              fi
            done
          fi

          echo "Next tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create and Push New Tag
        env:
          NEW_TAG: ${{ env.new_tag }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Generate latest.yml for Electron Auto-Update
        id: generate_latest_yml
        run: |
          version="${{ env.new_tag }}"
          releaseDate=$(date --utc +'%Y-%m-%dT%H:%M:%SZ')
          sha512=$(shasum -a 512 ./artifacts/asar/app-asar.zip | awk '{ print $1 }')

          echo "version: $version" > ./artifacts/asar/latest.yml
          echo "path: app-asar.zip" >> ./artifacts/asar/latest.yml
          echo "sha512: $sha512" >> ./artifacts/asar/latest.yml
          echo "releaseDate: $releaseDate" >> ./artifacts/asar/latest.yml

          echo "Generated latest.yml with version $version, path app-asar.zip, sha512 $sha512, and releaseDate $releaseDate"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          gh release create ${{ env.new_tag }} \
            ./artifacts/asar/app-asar.zip \
            ./artifacts/asar/latest.yml \
            --title "ASAR Release - ${{ env.new_tag }}" \
            --notes "Release of ASAR file only." \
            --prerelease=false \
            --draft=false
