name: Build, Tag, and Release Electron Installers

on:
  push:
    branches:
      - 'main'
      - 'bt/installer'

jobs:
  build_and_tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x64

    outputs:
      tag: ${{ steps.set_tag_non_windows.outputs.new_tag || steps.set_tag_windows.outputs.new_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          yarn install
          yarn add -D @quasar/cli

      - name: Confirm Quasar CLI Installation
        run: |
          npx quasar --version

      - name: Set Tag Version (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        id: set_tag_non_windows
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "::set-output name=new_tag::v$VERSION"
          echo "NEW_TAG=v$VERSION" >> $GITHUB_ENV

      - name: Set Tag Version (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        id: set_tag_windows
        run: |
          $VERSION = (node -p "require('./package.json').version")
          echo "::set-output name=new_tag::v$VERSION"
          echo "NEW_TAG=v$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create and Push Tag (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          TAG=$NEW_TAG
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git tag -a $TAG -m "Release $TAG"
            git push origin $TAG
          fi

      - name: Create and Push Tag (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          $TAG = "$env:NEW_TAG"
          try {
            git rev-parse "$TAG" | Out-Null
            Write-Output "Tag $TAG already exists. Skipping tag creation."
          }
          catch {
            git tag -a $TAG -m "Release $TAG"
            git push origin $TAG
          }

      - name: Build Quasar Electron app
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          npx quasar build -m electron

      # Rename output files for each platform without extra zipping
      # - name: Rename Artifacts (Linux)
      #   if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      #   run: |
      #     mv dist/electron/Packaged/*.AppImage dist/electron/Packaged/
      #     mv dist/electron/Packaged/*.zip dist/electron/Packaged/

      # - name: Rename Artifacts (macOS x64)
      #   if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
      #   run: |
      #     mv dist/electron/Packaged/*.dmg dist/electron/Packaged/
      #     mv dist/electron/Packaged/*.zip dist/electron/Packaged/

      # - name: Rename Artifacts (macOS arm64)
      #   if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      #   run: |
      #     mv dist/electron/Packaged/*.dmg dist/electron/Packaged/
      #     mv dist/electron/Packaged/*.zip dist/electron/Packaged/

      # - name: Rename Artifacts (Windows)
      #   if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
      #   run: |
      #     mv dist\electron\Packaged\*.exe dist\electron\Packaged\
      #     mv dist\electron\Packaged\*.zip dist\electron\Packaged\

      # Upload build artifacts directly without further compression
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-installer-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/electron/Packaged

  release:
    needs: [build_and_tag]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-ubuntu-latest-x64
          path: ./artifacts/linux

      - name: Download Artifacts (macOS x64)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-macos-latest-x64
          path: ./artifacts/macos/x64

      - name: Download Artifacts (macOS arm64)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-macos-latest-arm64
          path: ./artifacts/macos/arm64

      - name: Download Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-windows-latest-x64
          path: ./artifacts/windows

      - name: Create GitHub Release for Installers
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build_and_tag.outputs.tag }}
          name: 'Release ${{ needs.build_and_tag.outputs.tag }}'
          files: |
            ./artifacts/linux/electron-installer-linux.AppImage
            ./artifacts/linux/electron-installer-linux.zip
            ./artifacts/macos/x64/electron-installer-macos-x64.dmg
            ./artifacts/macos/x64/electron-installer-macos.zip
            ./artifacts/macos/arm64/electron-installer-macos-arm64.dmg
            ./artifacts/macos/arm64/electron-installer-macos.zip
            ./artifacts/windows/electron-installer-windows.exe
            ./artifacts/windows/electron-installer-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PUSH }}
