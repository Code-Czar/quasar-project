name: Build, Tag, and Release Electron Installers

on:
  push:
    branches:
      - 'bt/installer' # Trigger this workflow only for pushes to bt/installer

jobs:
  build_and_tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags to ensure access to previous tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          yarn install
          yarn add -D @quasar/cli # Install Quasar CLI locally

      - name: Confirm Quasar CLI Installation
        run: |
          npx quasar --version

      - name: Build Quasar Electron app
        run: |
          npx quasar build -m electron # Use npx to ensure the locally installed CLI is used

      - name: Remove Unpacked folder (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          rm -rf dist/electron/Unpacked

      # Compress the artifacts for each platform
      - name: Compress Artifacts (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist/compressed
          zip -r dist/compressed/electron-installer-ubuntu.zip dist/electron/Packaged

      - name: Compress Artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dist/compressed
          zip -r dist/compressed/electron-installer-macos.zip dist/electron/Packaged

      - name: Compress Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist\compressed
          Compress-Archive -Path dist\electron\Packaged -DestinationPath dist\compressed\electron-installer-windows.zip

      - name: Upload Compressed Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-installer-${{ matrix.os }}
          path: dist/compressed

      - name: Generate and Push New Tag
        if: matrix.os == 'ubuntu-latest' # Only execute tag creation once
        id: tag_version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          latest_tag=$(git tag --list 'v*' | sort -V | tail -n1)

          # Handle case with no tags
          if [ -z "$latest_tag" ]; then
            new_tag="v0.1.0"
          else
            # Increment the tag version (assuming semantic versioning)
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            parts[-1]=$((parts[-1]+1))
            new_tag="v${parts[0]}.${parts[1]}.${parts[2]}"
          fi

          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_ENV

          # Push the new tag
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $new_tag
          git push origin $new_tag

  release:
    needs: [build_and_tag]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/bt/installer' # Ensures it runs only on this branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Artifacts (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-ubuntu-latest
          path: ./artifacts/ubuntu

      - name: Download Artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-macos-latest
          path: ./artifacts/macos

      - name: Download Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-windows-latest
          path: ./artifacts/windows

      # Use the tag created in the previous job
      - name: Create GitHub Release for Installers
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build_and_tag.outputs.tag_version.tag }}
          name: 'Release ${{ needs.build_and_tag.outputs.tag_version.tag }}'
          files: |
            ./artifacts/ubuntu/**
            ./artifacts/macos/**
            ./artifacts/windows/**
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PUSH }}
