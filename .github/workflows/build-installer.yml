name: Build, Tag, and Release Electron Installers

on:
  push:
    branches:
      - 'main'
      - 'bt/installer'

jobs:
  build_and_tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    outputs:
      tag: ${{ steps.set_tag_non_windows.outputs.new_tag || steps.set_tag_windows.outputs.new_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          yarn install
          yarn add -D @quasar/cli # Install Quasar CLI locally

      - name: Confirm Quasar CLI Installation
        run: |
          npx quasar --version

      - name: Set Tag Version (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        id: set_tag_non_windows
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "::set-output name=new_tag::v$VERSION"
          echo "NEW_TAG=v$VERSION" >> $GITHUB_ENV

      - name: Set Tag Version (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        id: set_tag_windows
        run: |
          $VERSION = (node -p "require('./package.json').version")
          echo "::set-output name=new_tag::v$VERSION"
          echo "NEW_TAG=v$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Use the New Tag
      - name: Use the New Tag
        run: echo "New Tag=$NEW_TAG"

      - name: Create and Push Tag (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          TAG=$NEW_TAG
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git tag -a $TAG -m "Release $TAG"
            git push origin $TAG
          fi

      - name: Create and Push Tag (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          $TAG = "$env:NEW_TAG"
          try {
            git rev-parse "$TAG" | Out-Null
            Write-Output "Tag $TAG already exists. Skipping tag creation."
          }
          catch {
            git tag -a $TAG -m "Release $TAG"
            git push origin $TAG
          }

      - name: Build Quasar Electron app
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PUSH }}
        run: |
          npx quasar build -m electron

      - name: Remove Unpacked folder (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          rm -rf dist/electron/Unpacked

      # Compress the artifacts for each platform
      - name: Compress Artifacts (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist/compressed
          zip -r dist/compressed/electron-installer-ubuntu.zip dist/electron/Packaged

      - name: Compress Artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dist/compressed
          zip -r dist/compressed/electron-installer-macos.zip dist/electron/Packaged

      - name: Compress Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist\compressed
          Compress-Archive -Path dist\electron\Packaged -DestinationPath dist\compressed\electron-installer-windows.zip

      - name: Upload Compressed Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-installer-${{ matrix.os }}
          path: dist/compressed

  release:
    needs: [build_and_tag]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-ubuntu-latest
          path: ./artifacts/ubuntu

      - name: Download Artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-macos-latest
          path: ./artifacts/macos

      - name: Download Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: electron-installer-windows-latest
          path: ./artifacts/windows

      - name: Create GitHub Release for Installers
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build_and_tag.outputs.tag }}
          name: 'Release ${{ needs.build_and_tag.outputs.tag }}'
          files: |
            ./artifacts/ubuntu/**
            ./artifacts/macos/**
            ./artifacts/windows/**
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PUSH }}
