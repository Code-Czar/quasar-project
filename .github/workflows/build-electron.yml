name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*' # Trigger the action only when a new tag matching v* is pushed

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          yarn install
          yarn global add @quasar/cli

      - name: Build Quasar Electron app
        run: |
          yarn quasar build -m electron

      - name: Remove Unpacked folder (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          rm -rf dist/electron/Unpacked

      - name: Copy ASAR file
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dist/asar_files
          cp dist/electron/Packaged/Quasar\ App-darwin-arm64/Quasar\ App.app/Contents/Resources/app.asar dist/asar_files/app.asar

      - name: Upload platform-specific build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-${{ matrix.os }}
          path: dist/electron/Packaged

      - name: Upload ASAR file
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: app-asar
          path: dist/asar_files/app.asar

  generate_release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Generate a new tag based on the latest version
      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version and create new tag
        id: tag_version
        run: |
          IFS=. read -r major minor patch <<<"${latest_tag#v}"
          new_tag="v$major.$((minor+1))"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          git tag $new_tag
          git push origin $new_tag

      # Download all artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: electron-app-ubuntu-latest
          path: ./artifacts/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: electron-app-macos-latest
          path: ./artifacts/macos
      - uses: actions/download-artifact@v4
        with:
          name: electron-app-windows-latest
          path: ./artifacts/windows
      - uses: actions/download-artifact@v4
        with:
          name: app-asar
          path: ./artifacts/asar

      # Create GitHub Release with the new tag
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_INSTALLER }}

      # Upload release assets
      - name: Upload Linux Build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ubuntu
          asset_name: electron-app-linux.zip
          asset_content_type: application/zip

      - name: Upload macOS Build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos
          asset_name: electron-app-macos.zip
          asset_content_type: application/zip

      - name: Upload Windows Build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows
          asset_name: electron-app-windows.zip
          asset_content_type: application/zip

      - name: Upload ASAR File
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/asar/app.asar
          asset_name: app.asar
          asset_content_type: application/octet-stream
